import { PrismaClient } from '@prisma/client';
import {Markup, MiddlewareFn} from 'telegraf';
import { getState } from './state';
import { config } from '../config/env';
import { BotContext } from "./bot";

const prisma = new PrismaClient();

export const checkBlockedMiddleware: MiddlewareFn<BotContext> = async (ctx, next) => {
    const userId = ctx.from?.id.toString();
    if (userId) {
        const user = await prisma.user.findUnique({
            where: { chatId: userId },
            select: { isBlocked: true }
        });
        if (user?.isBlocked) {
            await ctx.reply('üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!');
            return;
        }
        ctx.state = await getState(userId);
    } else {
        ctx.state = {};
    }
    await next();
};

export const amlMiddleware: MiddlewareFn<BotContext> = async (ctx, next) => {
    const userId = ctx.from?.id.toString();
    if (userId && config.AML_VERIFICATION_ENABLED) {
        const user = await prisma.user.findUnique({
            where: { chatId: userId },
            select: { isBlocked: true },
        });
        if (user?.isBlocked) {
            await ctx.reply('üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!');
            return;
        }

        const openAmlVerification = await prisma.amlVerification.findFirst({
            where: {
                user: { chatId: userId },
                status: 'open',
            },
        });

        if (openAmlVerification) {
            await ctx.reply(
                'üö´ –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–∞—è AML-–ø—Ä–æ–≤–µ—Ä–∫–∞. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ–±–º–µ–Ω–∞ –∏ –≤—ã–≤–æ–¥–∞.',
                {
                    reply_markup: {
                        inline_keyboard: [[Markup.button.callback('–ü—Ä–∏–ª–æ–∂–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã', 'aml_start_verification')]],
                    },
                }
            );
            return;
        }

        ctx.state = await getState(userId);
    } else {
        ctx.state = {};
    }
    await next();
};