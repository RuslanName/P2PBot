import { Telegraf, Markup } from 'telegraf';
import { PrismaClient } from '@prisma/client';
import { BotContext } from '../bot';
import { getState, setState, clearState } from '../state';
import { config } from '../../config/env';

const prisma = new PrismaClient();
const SUPPORT_CHAT_ID = config.SUPPORT_CHAT_ID;

export function handleAml(bot: Telegraf<BotContext>) {
    bot.action('aml_start_verification', async (ctx) => {
        if (!ctx.from?.id) return;
        const userId = ctx.from.id.toString();
        const state = await getState(userId);

        if (!state.amlVerificationId) {
            await ctx.editMessageText('–û—à–∏–±–∫–∞: AML-–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', Markup.inlineKeyboard([]));
            return;
        }

        await setState(userId, {
            action: 'aml_attach_documents',
            amlVerificationId: state.amlVerificationId,
            support: { images: [] },
        });

        await ctx.editMessageText(
            '–ü—Ä–∏–ª–æ–∂–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (–ø–∞—Å–ø–æ—Ä—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞, –∏—Å—Ç–æ—á–Ω–∏–∫ —Å—Ä–µ–¥—Å—Ç–≤) –¥–ª—è AML-–ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ',
            Markup.inlineKeyboard([
                [Markup.button.callback('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å', 'aml_submit_documents')],
                [Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å', 'aml_cancel')],
            ])
        );
    });

    bot.action('aml_submit_documents', async (ctx) => {
        if (!ctx.from?.id) return;
        const userId = ctx.from.id.toString();
        const state = await getState(userId);

        if (!state.amlVerificationId) {
            await ctx.editMessageText('–û—à–∏–±–∫–∞: AML-–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', Markup.inlineKeyboard([]));
            return;
        }

        const verification = await prisma.amlVerification.findUnique({
            where: { id: state.amlVerificationId },
            include: { user: true },
        });

        if (!verification) {
            await ctx.editMessageText('–û—à–∏–±–∫–∞: AML-–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', Markup.inlineKeyboard([]));
            return;
        }

        await prisma.amlVerification.update({
            where: { id: state.amlVerificationId },
            data: { verificationImagesPath: state.support?.images || [] },
        });

        const senderName = verification.user.username ? `@${verification.user.username}` : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        const message = [
            `AML-–ø—Ä–æ–≤–µ—Ä–∫–∞ ‚Ññ${verification.id}`,
            `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${senderName}`,
            `–ü—Ä–∏—á–∏–Ω–∞: ${verification.reason}`,
        ].join('\n');

        try {
            if (state.support?.images && state.support.images.length > 0) {
                await ctx.telegram.sendMediaGroup(SUPPORT_CHAT_ID, state.support.images.map((image, index) => ({
                    type: 'photo',
                    media: image,
                    caption: index === 0 ? message : undefined,
                })));
            } else {
                await ctx.telegram.sendMessage(SUPPORT_CHAT_ID, message, {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [
                            [
                                Markup.button.callback('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', `aml_approve_${verification.id}`),
                                Markup.button.callback('–û—Ç–∫–ª–æ–Ω–∏—Ç—å', `aml_reject_${verification.id}`),
                            ],
                        ],
                    },
                });
            }

            await ctx.editMessageText(
                '–í–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ AML-–ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.',
                Markup.inlineKeyboard([])
            );

            await clearState(userId);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ AML-–ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
            await ctx.editMessageText(
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                Markup.inlineKeyboard([])
            );
        }
    });

    bot.action('aml_cancel', async (ctx) => {
        if (!ctx.from?.id) return;
        const userId = ctx.from.id.toString();
        await clearState(userId);
        await ctx.editMessageText('AML-–ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', Markup.inlineKeyboard([]));
    });

    bot.action(/aml_approve_(\d+)/, async (ctx) => {
        if (!ctx.from?.id) return;
        const verificationId = parseInt(ctx.match[1], 10);

        const verification = await prisma.amlVerification.findUnique({
            where: { id: verificationId },
            include: { user: true },
        });

        if (!verification) {
            await ctx.editMessageText('–û—à–∏–±–∫–∞: AML-–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', Markup.inlineKeyboard([]));
            return;
        }

        await prisma.amlVerification.update({
            where: { id: verificationId },
            data: { status: 'completed' },
        });

        await ctx.telegram.sendMessage(
            verification.user.chatId,
            '‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ AML-–ø—Ä–æ–≤–µ—Ä–∫—É!'
        );

        await ctx.editMessageText('AML-–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞', Markup.inlineKeyboard([]));
    });

    bot.action(/aml_reject_(\d+)/, async (ctx) => {
        if (!ctx.from?.id) return;
        const verificationId = parseInt(ctx.match[1], 10);

        const verification = await prisma.amlVerification.findUnique({
            where: { id: verificationId },
            include: { user: true },
        });

        if (!verification) {
            await ctx.editMessageText('–û—à–∏–±–∫–∞: AML-–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', Markup.inlineKeyboard([]));
            return;
        }

        await prisma.amlVerification.update({
            where: { id: verificationId },
            data: { status: 'rejected' },
        });

        await ctx.telegram.sendMessage(
            verification.user.chatId,
            'üö´ –í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ AML-–ø—Ä–æ–≤–µ—Ä–∫—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.'
        );

        await ctx.editMessageText('AML-–ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞', Markup.inlineKeyboard([]));
    });

    bot.on('photo', async (ctx) => {
        if (!ctx.from?.id) return;
        const userId = ctx.from.id.toString();
        const state = await getState(userId);

        if (state.action === 'aml_attach_documents') {
            const fileId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
            const currentImages = state.support?.images || [];
            const updatedImages = [...currentImages, fileId];

            await setState(userId, {
                action: 'aml_attach_documents',
                support: { images: updatedImages },
                amlVerificationId: state.amlVerificationId,
            });

            await ctx.reply(
                `–î–æ–±–∞–≤–ª–µ–Ω–æ ${updatedImages.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ü—Ä–∏–ª–æ–∂–∏—Ç–µ –µ—â—ë –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ`,
                Markup.inlineKeyboard([
                    [Markup.button.callback('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å', 'aml_submit_documents')],
                    [Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å', 'aml_cancel')],
                ])
            );
        }
    });

    bot.on('document', async (ctx) => {
        if (!ctx.from?.id) return;
        const userId = ctx.from.id.toString();
        const state = await getState(userId);

        if (state.action === 'aml_attach_documents') {
            const fileId = ctx.message.document.file_id;
            const currentImages = state.support?.images || [];
            const updatedImages = [...currentImages, fileId];

            await setState(userId, {
                action: 'aml_attach_documents',
                support: { images: updatedImages },
                amlVerificationId: state.amlVerificationId,
            });

            await ctx.reply(
                `–î–æ–±–∞–≤–ª–µ–Ω–æ ${updatedImages.length} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ü—Ä–∏–ª–æ–∂–∏—Ç–µ –µ—â—ë –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ`,
                Markup.inlineKeyboard([
                    [Markup.button.callback('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å', 'aml_submit_documents')],
                    [Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å', 'aml_cancel')],
                ])
            );
        }
    });
}