import {Markup, Telegraf} from 'telegraf';
import {PrismaClient} from '@prisma/client';
import {BotContext} from '../bot';
import {clearState, getState, setState} from '../state';
import {calculateClientTransaction, calculateReferralFee} from '../../utils/calculateTransaction';
import {sendP2PTransaction} from "../../wallet/transaction";

const prisma = new PrismaClient();

export function handleDeals(bot: Telegraf<BotContext>) {
    bot.hears('üí∞ –°–¥–µ–ª–∫–∏', async (ctx) => {
        await ctx.reply('–ö–∞–∫—É—é –æ–ø—Ü–∏—é —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å?', Markup.inlineKeyboard([
            [Markup.button.callback('–ü–æ–∫—É–ø–∫–∞', 'buy'), Markup.button.callback('–ü—Ä–æ–¥–∞–∂–∞', 'sell')],
        ]));
    });

    bot.action('buy', async (ctx) => {
        await ctx.editMessageText('–ö–∞–∫—É—é –≤–∞–ª—é—Ç—É —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?', Markup.inlineKeyboard([
            [
                Markup.button.callback('BTC', 'buy_BTC'),
                Markup.button.callback('LTC', 'buy_LTC'),
            ],
            [
                Markup.button.callback('USDT', 'buy_USDT'),
                Markup.button.callback('XMR', 'buy_XMR'),
            ],
            [Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å', 'cancel')],
        ]));
    });

    bot.action('sell', async (ctx) => {
        await ctx.editMessageText('–ö–∞–∫—É—é –≤–∞–ª—é—Ç—É —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å?', Markup.inlineKeyboard([
            [
                Markup.button.callback('BTC', 'sell_BTC'),
                Markup.button.callback('LTC', 'sell_LTC'),
            ],
            [
                Markup.button.callback('USDT', 'sell_USDT'),
                Markup.button.callback('XMR', 'sell_XMR'),
            ],
            [Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å', 'cancel')],
        ]));
    });

    bot.action(/buy_(BTC|LTC|USDT|XMR)/, async (ctx) => {
        const coin = ctx.match[1];
        if (!ctx.from?.id) return;

        const userId = ctx.from.id.toString();
        await setState(userId, { coin, action: 'buy_fiat' });

        await ctx.editMessageText('–ö–∞–∫—É—é —Ñ–∏–∞—Ç–Ω—É—é –≤–∞–ª—é—Ç—É —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å?', Markup.inlineKeyboard([
            [
                Markup.button.callback('RUB', 'buy_fiat_RUB'),
                Markup.button.callback('UAH', 'buy_fiat_UAH'),
            ],
            [
                Markup.button.callback('KZT', 'buy_fiat_KZT'),
                Markup.button.callback('BYN', 'buy_fiat_BYN'),
            ],
            [
                Markup.button.callback('USD', 'buy_fiat_USD'),
                Markup.button.callback('EUR', 'buy_fiat_EUR'),
            ],
            [Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å', 'cancel')],
        ]));
    });

    bot.action(/sell_(BTC|LTC|USDT|XMR)/, async (ctx) => {
        const coin = ctx.match[1];
        if (!ctx.from?.id) return;

        const userId = ctx.from.id.toString();
        await setState(userId, { coin, action: 'sell_fiat' });

        await ctx.editMessageText('–ö–∞–∫—É—é —Ñ–∏–∞—Ç–Ω—É—é –≤–∞–ª—é—Ç—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?', Markup.inlineKeyboard([
            [
                Markup.button.callback('RUB', 'sell_fiat_RUB'),
                Markup.button.callback('UAH', 'sell_fiat_UAH'),
            ],
            [
                Markup.button.callback('KZT', 'sell_fiat_KZT'),
                Markup.button.callback('BYN', 'sell_fiat_BYN'),
            ],
            [
                Markup.button.callback('USD', 'sell_fiat_USD'),
                Markup.button.callback('EUR', 'sell_fiat_EUR'),
            ],
            [Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å', 'cancel')],
        ]));
    });

    bot.action(/buy_fiat_(RUB|UAH|KZT|BYN|USD|EUR)/, async (ctx) => {
        const fiatCurrency = ctx.match[1];
        if (!ctx.from?.id) return;

        const userId = ctx.from.id.toString();
        const state = await getState(userId);
        if (!state.coin) return;

        await setState(userId, { fiatCurrency, page: 0 });

        const pageSize = 5;
        const skip = 0;
        const offers = await prisma.offer.findMany({
            where: {
                coin: state.coin,
                type: 'buy',
                fiatCurrency: { has: fiatCurrency },
                status: 'open'
            },
            take: pageSize,
            skip,
            include: { warrantHolder: { include: { user: true } } }
        });

        const totalOffers = await prisma.offer.count({
            where: {
                coin: state.coin,
                type: 'buy',
                fiatCurrency: { has: fiatCurrency },
                status: 'open'
            },
        });

        const buttons = offers.map((offer) => [
            Markup.button.callback(
                `${offer.warrantHolder.user.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}: ${offer.minDealAmount}-${offer.maxDealAmount} ${state.coin} (${offer.markupPercent}%)`,
                `select_buy_${offer.id}`
            ),
        ]);

        if (totalOffers > pageSize) {
            buttons.push([Markup.button.callback('>', 'next_buy')]);
        }

        await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –æ—Ñ–µ—Ä—Ç—É', Markup.inlineKeyboard(buttons));
    });

    bot.action(/sell_fiat_(RUB|UAH|KZT|BYN|USD|EUR)/, async (ctx) => {
        const fiatCurrency = ctx.match[1];
        if (!ctx.from?.id) return;

        const userId = ctx.from.id.toString();
        const state = await getState(userId);
        if (!state.coin) return;

        await setState(userId, { fiatCurrency, page: 0 });

        const pageSize = 5;
        const skip = 0;
        const offers = await prisma.offer.findMany({
            where: {
                coin: state.coin,
                type: 'sell',
                fiatCurrency: { has: fiatCurrency },
                status: 'open'
            },
            take: pageSize,
            skip,
            include: { warrantHolder: { include: { user: true } } }
        });

        const totalOffers = await prisma.offer.count({
            where: {
                coin: state.coin,
                type: 'sell',
                fiatCurrency: { has: fiatCurrency },
                status: 'open'
            },
        });

        const buttons = offers.map((offer) => [
            Markup.button.callback(
                `${offer.warrantHolder.user.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}: ${offer.minDealAmount}-${offer.maxDealAmount} ${state.coin} (${offer.markupPercent}%)`,
                `select_sell_${offer.id}`
            ),
        ]);

        if (totalOffers > pageSize) {
            buttons.push([Markup.button.callback('>', 'next_sell')]);
        }

        await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –æ—Ñ–µ—Ä—Ç—É', Markup.inlineKeyboard(buttons));
    });

    bot.action('prev_buy', async (ctx) => {
        if (!ctx.from?.id) return;
        const userId = ctx.from.id.toString();
        const state = await getState(userId);
        if (!state.coin || !state.fiatCurrency) return;

        let page = (state.page || 0) - 1;
        if (page < 0) page = 0;

        await setState(userId, { page });

        const pageSize = 5;
        const skip = page * pageSize;
        const offers = await prisma.offer.findMany({
            where: {
                coin: state.coin,
                type: 'buy',
                fiatCurrency: { has: state.fiatCurrency },
                status: 'open'
            },
            take: pageSize,
            skip,
            include: { warrantHolder: { include: { user: true } } }
        });

        const totalOffers = await prisma.offer.count({
            where: {
                coin: state.coin,
                type: 'buy',
                fiatCurrency: { has: state.fiatCurrency },
                status: 'open'
            },
        });

        const buttons = offers.map((offer) => [
            Markup.button.callback(
                `${offer.warrantHolder.user.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}: ${offer.minDealAmount}-${offer.maxDealAmount} ${state.coin} (${offer.markupPercent}%)`,
                `select_buy_${offer.id}`
            ),
        ]);

        const totalPages = Math.ceil(totalOffers / pageSize);
        const currentPage = page;

        if (totalOffers > pageSize) {
            if (currentPage === 0) {
                buttons.push([Markup.button.callback('>', 'next_buy')]);
            } else if (currentPage === totalPages - 1) {
                buttons.push([Markup.button.callback('<', 'prev_buy')]);
            } else {
                buttons.push([
                    Markup.button.callback('<', 'prev_buy'),
                    Markup.button.callback('>', 'next_buy'),
                ]);
            }
        }

        await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –æ—Ñ–µ—Ä—Ç—É', Markup.inlineKeyboard(buttons));
    });

    bot.action('next_buy', async (ctx) => {
        if (!ctx.from?.id) return;
        const userId = ctx.from.id.toString();
        const state = await getState(userId);
        if (!state.coin || !state.fiatCurrency) return;

        const page = (state.page || 0) + 1;
        const pageSize = 5;
        const skip = page * pageSize;

        const offers = await prisma.offer.findMany({
            where: {
                coin: state.coin,
                type: 'buy',
                fiatCurrency: { has: state.fiatCurrency },
                status: 'open'
            },
            take: pageSize,
            skip,
            include: { warrantHolder: { include: { user: true } } }
        });

        const totalOffers = await prisma.offer.count({
            where: {
                coin: state.coin,
                type: 'buy',
                fiatCurrency: { has: state.fiatCurrency },
                status: 'open'
            },
        });

        if (offers.length === 0) {
            await setState(userId, { page: page - 1 });
            await ctx.editMessageText('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ñ–µ—Ä—Ç –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', Markup.inlineKeyboard([]));
            return;
        }

        await setState(userId, { page });

        const buttons = offers.map((offer) => [
            Markup.button.callback(
                `${offer.warrantHolder.user.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}: ${offer.minDealAmount}-${offer.maxDealAmount} ${state.coin} (${offer.markupPercent}%)`,
                `select_buy_${offer.id}`
            ),
        ]);

        const totalPages = Math.ceil(totalOffers / pageSize);

        if (totalOffers > pageSize) {
            if (page === totalPages - 1) {
                buttons.push([Markup.button.callback('<', 'prev_buy')]);
            } else {
                buttons.push([
                    Markup.button.callback('<', 'prev_buy'),
                    Markup.button.callback('>', 'next_buy'),
                ]);
            }
        }

        await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –æ—Ñ–µ—Ä—Ç—É', Markup.inlineKeyboard(buttons));
    });

    bot.action('prev_sell', async (ctx) => {
        if (!ctx.from?.id) return;
        const userId = ctx.from.id.toString();
        const state = await getState(userId);
        if (!state.coin || !state.fiatCurrency) return;

        let page = (state.page || 0) - 1;
        if (page < 0) page = 0;

        await setState(userId, { page });

        const pageSize = 5;
        const skip = page * pageSize;
        const offers = await prisma.offer.findMany({
            where: {
                coin: state.coin,
                type: 'sell',
                fiatCurrency: { has: state.fiatCurrency },
                status: 'open'
            },
            take: pageSize,
            skip,
            include: { warrantHolder: { include: { user: true } } }
        });

        const totalOffers = await prisma.offer.count({
            where: {
                coin: state.coin,
                type: 'sell',
                fiatCurrency: { has: state.fiatCurrency },
                status: 'open'
            },
        });

        const buttons = offers.map((offer) => [
            Markup.button.callback(
                `${offer.warrantHolder.user.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}: ${offer.minDealAmount}-${offer.maxDealAmount} ${offer.coin} (${offer.markupPercent}%)`,
                `select_sell_${offer.id}`
            ),
        ]);

        const totalPages = Math.ceil(totalOffers / pageSize);
        const currentPage = page;

        if (totalOffers > pageSize) {
            if (currentPage === 0) {
                buttons.push([Markup.button.callback('>', 'next_sell')]);
            } else if (currentPage === totalPages - 1) {
                buttons.push([Markup.button.callback('<', 'prev_sell')]);
            } else {
                buttons.push([
                    Markup.button.callback('<', 'prev_sell'),
                    Markup.button.callback('>', 'next_sell'),
                ]);
            }
        }

        await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –æ—Ñ–µ—Ä—Ç—É', Markup.inlineKeyboard(buttons));
    });

    bot.action('next_sell', async (ctx) => {
        if (!ctx.from?.id) return;
        const userId = ctx.from.id.toString();
        const state = await getState(userId);
        if (!state.coin || !state.fiatCurrency) return;

        const page = (state.page || 0) + 1;
        const pageSize = 5;
        const skip = page * pageSize;

        const offers = await prisma.offer.findMany({
            where: {
                coin: state.coin,
                type: 'sell',
                fiatCurrency: { has: state.fiatCurrency },
                status: 'open'
            },
            take: pageSize,
            skip,
            include: { warrantHolder: { include: { user: true } } }
        });

        const totalOffers = await prisma.offer.count({
            where: {
                coin: state.coin,
                type: 'sell',
                fiatCurrency: { has: state.fiatCurrency },
                status: 'open'
            },
        });

        if (offers.length === 0) {
            await setState(userId, { page: page - 1 });
            await ctx.editMessageText('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ñ–µ—Ä—Ç –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', Markup.inlineKeyboard([]));
            return;
        }

        await setState(userId, { page });

        const buttons = offers.map((offer) => [
            Markup.button.callback(
                `${offer.warrantHolder.user.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}: ${offer.minDealAmount}-${offer.maxDealAmount} ${offer.coin} (${offer.markupPercent}%)`,
                `select_sell_${offer.id}`
            ),
        ]);

        const totalPages = Math.ceil(totalOffers / pageSize);

        if (totalOffers > pageSize) {
            if (page === totalPages - 1) {
                buttons.push([Markup.button.callback('<', 'prev_sell')]);
            } else {
                buttons.push([
                    Markup.button.callback('<', 'prev_sell'),
                    Markup.button.callback('>', 'next_sell'),
                ]);
            }
        }

        await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –æ—Ñ–µ—Ä—Ç—É', Markup.inlineKeyboard(buttons));
    });

    bot.action('confirm_buy', async (ctx) => {
        if (!ctx.from?.id) return;
        const state = await getState(ctx.from.id.toString());
        if (!state.coin || !state.amount || !state.fiatCurrency) return;

        await setState(ctx.from.id.toString(), { action: 'buy_wallet_choice' });
        await ctx.editMessageText(
            `–ù–∞ –∫–∞–∫–æ–π –≤–∞—à ${state.coin} –∫–æ—à–µ–ª—ë–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏?`,
            Markup.inlineKeyboard([
                [Markup.button.callback('–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã', 'platform_wallet'), Markup.button.callback('–°–≤–æ–π', 'own_wallet')],
                [Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å', 'cancel')]
            ])
        );
    });

    bot.action('confirm_sell', async (ctx) => {
        if (!ctx.from?.id) return;
        const userId = ctx.from.id.toString();
        await setState(userId, { action: 'sell_payment_details' });
        await ctx.editMessageText(
            '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–ª–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ). –í–≤–æ–¥–∏—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ!',
            Markup.inlineKeyboard([[Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å', 'cancel')]])
        );
    });

    bot.action('cancel', async (ctx) => {
        if (!ctx.from?.id) return;
        await ctx.editMessageText('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', Markup.inlineKeyboard([]));
        await clearState(ctx.from.id.toString());
    });

    bot.action('platform_wallet', async (ctx) => {
        if (!ctx.from?.id) return;
        const state = await getState(ctx.from.id.toString());
        const offer = await prisma.offer.findUnique({
            where: { id: state.offerId },
            include: { warrantHolder: { include: { user: true } } }
        });
        if (!offer || !state.fiatCurrency) return;

        const deal = await prisma.deal.create({
            data: {
                client: { connect: { id: offer.warrantHolder.user.id } },
                offer: { connect: { id: offer.id } },
                amount: state.amount,
                markupPercent: offer.markupPercent,
                fiatCurrency: state.fiatCurrency
            },
        });

        await setState(ctx.from.id.toString(), { dealId: deal.id });

        const totalAmount = await calculateClientTransaction('buy', state.coin, state.fiatCurrency, state.amount, offer.markupPercent);

        await ctx.editMessageText(
            `–†–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–æ–¥–∞–≤—Ü–∞ ${offer.warrantHolderPaymentDetails}. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ ${totalAmount} ${state.fiatCurrency} –ø—Ä–æ–¥–∞–≤—Ü—É –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏–ª"`,
            Markup.inlineKeyboard([Markup.button.callback('–û–ø–ª–∞—Ç–∏–ª', `paid_${deal.id}`)])
        );
    });

    bot.action('own_wallet', async (ctx) => {
        if (!ctx.from?.id) return;
        const state = await getState(ctx.from.id.toString());
        await setState(ctx.from.id.toString(), { action: 'buy_wallet_address' });
        await ctx.editMessageText(
            `–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–≤–æ–µ–≥–æ ${state.coin} –∫–æ—à–µ–ª—å–∫–∞. –í–≤–æ–¥–∏—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ!`,
            { reply_markup: { inline_keyboard: [[Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å', 'cancel')]] } }
        );
    });

    bot.action(/paid_(\d+)/, async (ctx) => {
        if (!ctx.from?.id) return;
        const dealId = parseInt(ctx.match[1], 10);

        const deal = await prisma.deal.update({
            where: { id: dealId },
            data: { clientConfirmed: true },
            include: { offer: { include: { warrantHolder: { include: { user: true } } } } }
        });

        if (!deal) return;

        const totalAmount = await calculateClientTransaction(deal.offer.type, deal.offer.coin, deal.fiatCurrency, deal.amount, deal.markupPercent);

        await ctx.telegram.sendMessage(
            deal.offer.warrantHolder.user.chatId,
            `–ü—Ä–∏—à–ª–∞ –æ–ø–ª–∞—Ç–∞ —Å–¥–µ–ª–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É ‚Ññ${deal.id} –Ω–∞ —Å—É–º–º—É ${totalAmount} ${deal.fiatCurrency}. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ —ç—Ç–æ–º –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏–ª"`,
            Markup.inlineKeyboard([Markup.button.callback('–ü–æ–ª—É—á–∏–ª', `received_${deal.id}`)])
        );

        await ctx.editMessageText('–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞');
    });

    bot.action(/received_(\d+)/, async (ctx) => {
        if (!ctx.from?.id) return;
        const dealId = parseInt(ctx.match[1], 10);

        const deal = await prisma.deal.findUnique({
            where: { id: dealId },
            include: {
                offer: { include: { warrantHolder: { include: { user: true } } } },
                client: { include: { referrer: true } }
            }
        });
        if (!deal) return;

        const warrantHolder = await prisma.warrantHolder.findUnique({
            where: { id: deal.offer.userId },
            include: { user: true }
        });
        if (!warrantHolder) return;
        const client = await prisma.user.findUnique({
            where: { id: deal.userId },
            include: {
                wallets: { where: { coin: deal.offer.coin } },
                referrer: true
            }
        });
        if (!warrantHolder || !client) return;

        let recipientAddress: string;
        let txId: string | undefined;

        if (deal.offer.type === "buy") {
            recipientAddress = deal.clientPaymentDetails || client.wallets[0].address;

            txId = await sendP2PTransaction(
                deal.amount,
                deal.offer.coin,
                warrantHolder.id,
                recipientAddress,
                "sell"
            );
        } else {
            recipientAddress = deal.offer.warrantHolderPaymentDetails;

            txId = await sendP2PTransaction(
                deal.amount,
                deal.offer.coin,
                client.id,
                recipientAddress,
                "buy"
            );
        }

        if (!txId) {
            await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            return;
        }

        await prisma.deal.update({
            where: { id: deal.id },
            data: { status: 'completed', txId }
        });

        const referralFee = calculateReferralFee(deal.amount, deal.offer.type as 'buy' | 'sell');

        if (referralFee > 0 && client.referrer) {
            await ctx.telegram.sendMessage(
                client.referrer.chatId,
                `–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å ${referralFee} ${deal.offer.coin} –∑–∞ —Å–¥–µ–ª–∫—É ‚Ññ${deal.id}!`
            );
        }

        await ctx.editMessageText(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\nTxID: ${txId}`);
        await ctx.telegram.sendMessage(client.chatId, `–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\nTxID: ${txId}`);
        await clearState(ctx.from.id.toString());
    });
}

export async function handleDealsText(ctx: BotContext) {
    if (!ctx.from?.id) return;
    const state = ctx.state;
    const userId = ctx.from.id.toString();

    if (state.action === 'buy_amount') {
        if (!('text' in ctx.message)) return;
        const amount = parseFloat(ctx.message.text);
        if (isNaN(amount)) {
            await ctx.reply('–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.');
            return;
        }

        const offer = await prisma.offer.findUnique({ where: { id: state.offerId } });
        if (!offer) return;

        if (amount < offer.minDealAmount || amount > offer.maxDealAmount) {
            await ctx.reply(`–û—à–∏–±–∫–∞: —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ ${offer.minDealAmount} - ${offer.maxDealAmount} ${offer.coin}.`);
            return;
        }

        await setState(userId, { amount });

        const totalAmount = await calculateClientTransaction('buy', state.coin, state.fiatCurrency, amount, offer.markupPercent);

        await ctx.reply(
            `–í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ ${amount} ${offer.coin} —Å –Ω–∞—Ü–µ–Ω–∫–æ–π –ø—Ä–æ–¥–∞–≤—Ü–∞ ${offer.markupPercent}%. ` +
            `–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ ${totalAmount} ${state.fiatCurrency}. –ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`,
            Markup.inlineKeyboard([
                [Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å', 'cancel'), Markup.button.callback('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'confirm_buy')],
            ])
        );
    } else if (state.action === 'sell_amount') {
        if (!('text' in ctx.message)) return;
        const amount = parseFloat(ctx.message.text);
        if (isNaN(amount)) {
            await ctx.reply('–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.');
            return;
        }

        const offer = await prisma.offer.findUnique({ where: { id: state.offerId } });
        if (!offer) return;

        if (amount < offer.minDealAmount || amount > offer.maxDealAmount) {
            await ctx.reply(`–û—à–∏–±–∫–∞: —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ ${offer.minDealAmount} - ${offer.maxDealAmount} ${offer.coin}.`);
            return;
        }

        await setState(userId, { amount });

        const totalAmount = await calculateClientTransaction('sell', state.coin, state.fiatCurrency, amount, offer.markupPercent);

        await ctx.reply(
            `–í—ã –ø—Ä–æ–¥–∞–µ—Ç–µ ${amount} ${offer.coin} —Å –Ω–∞—Ü–µ–Ω–∫–æ–π ${offer.markupPercent}%. ` +
            `–í—ã –ø–æ–ª—É—á–∏—Ç–µ ${totalAmount} ${state.fiatCurrency}. –ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`,
            Markup.inlineKeyboard([
                [Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å', 'cancel'), Markup.button.callback('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'confirm_sell')],
            ])
        );
    } else if (state.action === 'sell_payment_details') {
        if (!('text' in ctx.message)) return;
        const paymentDetails = ctx.message.text.trim();

        const offer = await prisma.offer.findUnique({
            where: { id: state.offerId },
            include: { warrantHolder: { include: { user: true } } }
        });
        if (!offer) return;

        if (!paymentDetails) {
            await ctx.reply('–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.');
            return;
        }

        const client = await prisma.user.findUnique({
            where: { chatId: userId }
        });
        if (!client) return;

        const deal = await prisma.deal.create({
            data: {
                client: { connect: { id: client.id } },
                offer: { connect: { id: offer.id } },
                amount: state.amount,
                markupPercent: offer.markupPercent,
                clientPaymentDetails: paymentDetails,
                fiatCurrency: state.fiatCurrency
            },
        });

        await setState(userId, { dealId: deal.id });

        const totalAmount = await calculateClientTransaction('sell', state.coin, state.fiatCurrency, state.amount, offer.markupPercent);

        await ctx.telegram.sendMessage(
            offer.warrantHolder.user.chatId,
            `–ü—Ä–∏—à–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É ‚Ññ${deal.id} –Ω–∞ –ø—Ä–æ–¥–∞–∂—É ${state.amount} ${offer.coin}. ` +
            `–†–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: ${paymentDetails}. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ ${totalAmount} ${state.fiatCurrency} –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–ª—É—á–∏–ª –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª"`,
            Markup.inlineKeyboard([Markup.button.callback('–ü–æ–ª—É—á–∏–ª –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª', `received_${deal.id}`)])
        );

        await ctx.reply('–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞');
    } else if (state.action === 'buy_wallet_address') {
        if (!('text' in ctx.message)) return;
        const walletAddress = ctx.message.text.trim();

        const offer = await prisma.offer.findUnique({
            where: { id: state.offerId },
            include: { warrantHolder: { include: { user: true } } }
        });
        if (!offer) return;

        if (!walletAddress) {
            await ctx.reply('–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞.');
            return;
        }

        await setState(userId, { paymentDetails: walletAddress });

        const deal = await prisma.deal.create({
            data: {
                client: { connect: { id: offer.warrantHolder.user.id } },
                offer: { connect: { id: offer.id } },
                amount: state.amount,
                markupPercent: offer.markupPercent,
                clientPaymentDetails: walletAddress,
                fiatCurrency: state.fiatCurrency
            },
        });

        await setState(userId, { dealId: deal.id });

        const totalAmount = await calculateClientTransaction('buy', state.coin, state.fiatCurrency, state.amount, offer.markupPercent);

        await ctx.reply(
            `–†–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–æ–¥–∞–≤—Ü–∞ ${offer.warrantHolderPaymentDetails}. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ ${totalAmount} ${state.fiatCurrency} –ø—Ä–æ–¥–∞–≤—Ü—É –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏–ª"`,
            Markup.inlineKeyboard([Markup.button.callback('–û–ø–ª–∞—Ç–∏–ª', `paid_${deal.id}`)])
        );
    }
}