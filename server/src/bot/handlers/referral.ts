import { Telegraf, Markup } from 'telegraf';
import { PrismaClient } from '@prisma/client';
import { BotContext } from '../bot';
import { config } from '../../config/env';

const prisma = new PrismaClient();

export function handleReferral(bot: Telegraf<BotContext>) {
    bot.hears('ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞', async (ctx) => {
        if (!ctx.from?.id) return;
        const userId = ctx.from.id.toString();

        const user = await prisma.user.findUnique({
            where: { chatId: userId },
            include: { referrals: true }
        });

        if (!user) {
            await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const referralLink = `https://t.me/${config.BOT_NAME}?start=${user.referralLinkId}`;
        const referralInfo = [
            `üîó *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞*`,
            referralLink,
            `–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${user.referrals.length}`,
            `–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ –æ–±–º–µ–Ω–æ–≤: ${config.REFERRAL_REVENUE_PERCENT}%`
        ];

        const shareText = 'üíé –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É P2P –±–æ—Ç—É!';
        const shareUrl = `https://t.me/share/url?url=${encodeURIComponent(referralLink)}&text=${encodeURIComponent(shareText)}`;

        const keyboard = Markup.inlineKeyboard([
            [Markup.button.url('üì¨ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è', shareUrl)]
        ]);

        await ctx.reply(referralInfo.join('\n'), {
            parse_mode: 'Markdown',
            reply_markup: keyboard.reply_markup
        });
    });
}