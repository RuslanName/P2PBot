generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  chatId           String            @unique
  username         String            @unique
  firstName        String
  lastName         String
  fiatCurrency     String
  referralLinkId   String            @default(uuid(4))
  referrer         User?             @relation("Referrals", fields: [referrerId], references: [id])
  referrerId       Int?
  referrals        User[]            @relation("Referrals")
  wallets          Wallet[]          @relation()
  deals            Deal[]            @relation("ClientDeals")
  supportTickets   SupportTicket[]
  amlVerifications AmlVerification[] @relation()
  warrantHolder    WarrantHolder?    @relation()
  isBlocked        Boolean           @default(false)

  createdAt DateTime @default(now())

  @@map("users")
}

model Wallet {
  id                 Int       @id @default(autoincrement())
  user               User      @relation(fields: [userId], references: [id])
  userId             Int
  coin               String
  balance            Float     @default(0)
  address            String    @unique
  privateKey         String
  unconfirmedBalance Float     @default(0)
  lastBalanceUpdate  DateTime?
  createdAt          DateTime  @default(now())

  @@map("wallets")
}

model WarrantHolder {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  password  String   @default(uuid(4))
  isBlocked Boolean  @default(false)
  createdAt DateTime @default(now())
  offers    Offer[]

  @@map("warrant_holders")
}

model Offer {
  id                          Int           @id @default(autoincrement())
  type                        String
  coin                        String
  fiatCurrency                String[]
  minDealAmount               Float
  maxDealAmount               Float
  markupPercent               Float
  warrantHolderPaymentDetails String[]
  warrantHolder               WarrantHolder @relation(fields: [userId], references: [id])
  userId                      Int
  deals                       Deal[]        @relation()
  status                      String        @default("open")
  createdAt                   DateTime      @default(now())

  @@map("offers")
}

model Deal {
  id                   Int      @id @default(autoincrement())
  client               User     @relation("ClientDeals", fields: [userId], references: [id])
  userId               Int
  offer                Offer    @relation(fields: [offerId], references: [id])
  offerId              Int
  amount               Float
  fiatCurrency         String
  markupPercent        Float
  clientPaymentDetails String?
  txId                 String?
  clientConfirmed      Boolean  @default(false)
  status               String   @default("pending")
  createdAt            DateTime @default(now())

  @@map("deals")
}

model SupportTicket {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  reason      String
  description String
  imagesPath  String[]
  status      String   @default("open")
  createdAt   DateTime @default(now())

  @@map("support_tickets")
}

model AmlVerification {
  id                     Int      @id @default(autoincrement())
  user                   User     @relation(fields: [userId], references: [id])
  userId                 Int
  reason                 String
  verificationImagesPath String[]
  status                 String   @default("open")
  createdAt              DateTime @default(now())

  @@map("aml_verifications")
}
