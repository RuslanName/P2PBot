generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  chatId        String         @unique
  username      String         @unique
  firstName     String
  lastName      String
  wallets       Wallet[]       @relation()
  deals         Deal[]         @relation("ClientDeals")
  warrantHolder WarrantHolder? @relation()
  createdAt     DateTime       @default(now())

  @@map("users")
}

model Wallet {
  id                 Int       @id @default(autoincrement())
  user               User      @relation(fields: [userId], references: [id])
  userId             Int
  coin               String
  balance            Float     @default(0)
  address            String    @unique
  privateKey         String
  unconfirmedBalance Float?    @default(0)
  lastBalanceUpdate  DateTime?
  walletPath         String?
  createdAt          DateTime  @default(now())

  @@map("wallets")
}

model WarrantHolder {
  id        Int      @id @default(autoincrement())
  password  String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  createdAt DateTime
  offers    Offer[]  @relation()

  @@map("warrant_holders")
}

model Transaction {
  id        Int      @id @default(autoincrement())
  type      String
  coin      String
  amount    Float
  txId      String   @unique
  status    String
  deals     Deal[]   @relation()
  createdAt DateTime @default(now())

  @@map("transactions")
}

model Offer {
  id            Int           @id @default(autoincrement())
  type          String
  coin          String
  amount        Float
  minDealAmount Float
  maxDealAmount Float
  markupPercent Float
  warrantHolder WarrantHolder @relation(fields: [userId], references: [id])
  userId        Int
  deals         Deal[]        @relation()
  createdAt     DateTime      @default(now())

  @@map("offers")
}

model Deal {
  id               Int         @id @default(autoincrement())
  client           User        @relation("ClientDeals", fields: [userId], references: [id])
  userId           Int
  offer            Offer       @relation(fields: [offerId], references: [id])
  offerId          Int
  transaction      Transaction @relation(fields: [transactionId], references: [id])
  transactionId    Int
  amount           Float
  fiatAmount       Float
  clientFee        Float
  warrantHolderFee Float
  minerFee         Float
  platformFee      Float
  status           String      @default("open")
  clientConfirmed  Boolean     @default(false)
  createdAt        DateTime    @default(now())

  @@map("deals")
}
